{"version":3,"sources":["components/app-header/app-header.js","components/app-header/index.js","components/field/index.js","components/field/field.js","components/timer/index.js","components/timer/timer.js","components/app/index.js","components/app/app.js","serviceWorker.js","index.js"],"names":["AppHeader","state","curTime","handleUserInput","e","name","target","value","_this","props","onChangeField","_this$props","this","blocks","tokens","react_default","a","createElement","className","defaultValue","onChange","app_header_Select","Component","Select","_ref","Field","counter","resultsArray","blockInput","onStartGame","preventDefault","clearClass","startStopGame","checkImage","play","result","dataset","item","push","length","i","checkClass","alert","x","document","getElementsByClassName","setTimeout","array","j","Math","floor","random","imagesArray","imagesQnt","pow","shuffle","console","log","_this2","size","endCount","field","createArray","map","index","data-item","key","data-view","onClick","btitle","type","onReset","concat","Timer","startTimer","textseconds","texttens","minutes","Number","substring","seconds","tens","setState","timer","Interval","setInterval","clearInterval","App","gameOn","buttonTitle","title","changeField","_this$setState","_this$setState2","Object","defineProperty","header","_this$state","components_timer","app_header","components_field","Boolean","window","location","hostname","match","ReactDOM","render","components_app","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38d62cc3.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nexport default class AppHeader extends Component {\r\n    state = {\r\n        curTime: '0:00:00'\r\n     }\r\n\r\n\r\n \r\n    handleUserInput = (e) => {\r\n        const name = e.target.name;\r\n        const value = e.target.value;\r\n        this.props.onChangeField(name, value);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { blocks, tokens } = this.props;\r\n\r\n    return (\r\n        <div className=\"app-header\">\r\n            <h2 className=\"mb-4\">Найди одинаковые картинки</h2>\r\n            \r\n            <form>\r\n                <div className=\"form-group row mx-0\">\r\n                    <label className=\"col-form-label col-sm-4 text-right\">Размер поля</label>\r\n                        <div className=\"col-sm-3\">\r\n                        <select defaultValue={blocks} name=\"blocks\"\r\n                            className=\"form-control col-sm-6\" \r\n                            onChange={this.handleUserInput}>\r\n                            <option value=\"6\">6x6</option>\r\n                            <option value=\"8\">8x8</option>\r\n                            <option value=\"9\">9x9</option>\r\n                            <option value=\"10\">10x10</option>\r\n                            <option value=\"12\">12x12</option>\r\n                        </select>\r\n                        </div>\r\n                </div>\r\n                <div className=\"form-group row mx-0\">\r\n                    <label className=\"col-form-label col-sm-4 text-right\">Кол-во одинаковых блоков</label>\r\n                        <div className=\"col-sm-2\">\r\n                            <Select blocks={blocks} tokens={tokens}\r\n                                handleUserInput={this.handleUserInput} />\r\n                        </div>\r\n                </div>\r\n            </form> \r\n\r\n        </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n// Возвращаем варианты выбора количества одинаковых картинок\r\nconst Select = ({blocks, tokens, handleUserInput}) => {\r\n    \r\n    switch (blocks) {\r\n        case \"6\": return(\r\n            <select defaultValue={tokens} name=\"tokens\"\r\n                        className=\"form-control col-sm-6\" \r\n                        onChange={handleUserInput}>\r\n            \r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>            \r\n            </select>\r\n        )\r\n\r\n        case \"8\": return(\r\n            <select defaultValue={tokens} name=\"tokens\"\r\n                        className=\"form-control col-sm-6\" \r\n                        onChange={handleUserInput}>\r\n            \r\n                <option value=\"2\">2</option>\r\n            </select>\r\n        )\r\n\r\n        case \"9\": return(\r\n            <select defaultValue={tokens} name=\"tokens\"\r\n                        className=\"form-control col-sm-6\" \r\n                        onChange={handleUserInput}>\r\n            \r\n                <option value=\"3\">3</option>            \r\n            </select>\r\n        )\r\n\r\n        case \"10\": return(\r\n            <select defaultValue={tokens} name=\"tokens\"\r\n                        className=\"form-control col-sm-6\" \r\n                        onChange={handleUserInput}>\r\n            \r\n                <option value=\"2\">2</option>\r\n                <option value=\"4\">4</option>            \r\n            </select>\r\n        )\r\n\r\n        case \"12\": return(\r\n            <select defaultValue={tokens} name=\"tokens\"\r\n                        className=\"form-control col-sm-6\" \r\n                        onChange={handleUserInput}>\r\n            \r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>              \r\n            </select>\r\n        )\r\n        default:\r\n        return (<p className=\"text-danger\">Error!!!</p>)\r\n\r\n\r\n    }\r\n}","import AppHeader from './app-header';\r\n\r\nexport default AppHeader;","import Field from './field';\r\n\r\nexport default Field;","import React, { Component } from 'react';\r\n\r\nimport './field.css';\r\nimport { setTimeout } from 'timers';\r\n\r\nexport default class Field extends Component {\r\n\r\ncounter = 0;\r\nresultsArray = [];\r\nblockInput = false;\r\n\r\nonStartGame = (e) => {\r\n    e.preventDefault();\r\n    const { curTime } = this.props;\r\n    this.clearClass();\r\n    this.props.startStopGame(curTime);\r\n    \r\n}\r\n\r\n\r\n\r\nshuffle(array){\r\n    for(let j, x, i = array.length; \r\n            i; j = Math.floor(Math.random() * i), x = array[--i],   \r\n                    array[i] = array[j], array[j] = x);\r\n    return array;\r\n    }\r\n\r\n// Создаем массив картинок\r\n\r\ncreateArray(blocks, tokens) {\r\n    let imagesArray = [];\r\n    \r\n    //Количество картинок\r\n    const imagesQnt = Math.pow(blocks, 2)/tokens;\r\n    \r\n    //Дублируем картинки по количеству повторных\r\n    for (let i=1; i<= tokens; i++)\r\n        for (let j=1; j <= imagesQnt ; j++) \r\n            imagesArray.push(j);\r\n    \r\n    // Перемешиваем картинки\r\n        \r\n    imagesArray = this.shuffle(imagesArray);\r\n    \r\n    return imagesArray;\r\n}\r\n\r\n// Проверка нажатой картинки\r\n\r\ncheckImage = (e) => {\r\n    // Если игра не начата и ввод заблокирован ничего не делаем\r\n    if (!this.props.play || this.blockInput) return;\r\n\r\n    // Если картника не перевернута и не отработана\r\n    if (e.target.className !== 'flipped' && e.target.className !== 'correct') {\r\n        e.target.className = 'flipped';\r\n        \r\n        // Получаем id картинки и записываем в массив результатов\r\n        const result = e.target.dataset.item;\r\n        this.resultsArray.push(result);\r\n      \r\n    }\r\n    \r\n    // Если открыто N картинок\r\n    // eslint-disable-next-line\r\n    if (this.resultsArray.length == this.props.tokens) {\r\n\r\n    // блокируем ввод\r\n    this.blockInput = true;\r\n    \r\n    // Проверяем открытые картинки\r\n\r\n    for (let i=0; i < this.resultsArray.length-1; i++) {\r\n\r\n        // Если картинки одинаковые, продолжаем цикл\r\n        if (this.resultsArray[i] === this.resultsArray[i+1]) {\r\n            continue;\r\n        }\r\n\r\n        // Если есть хоть одно не совпадение переворачиваем картинки и очищаем массив            \r\n        else {\r\n            this.checkClass(\"reverse\");\r\n            this.resultsArray = [];\r\n            return;\r\n        }\r\n    \r\n    }\r\n\r\n    // Если все картинки совпадают, убираем их с поля.\r\n    \r\n         this.checkClass(\"correct\");\r\n        \r\n        // Увеличиваем счетчик найденных картинок и проверяем кол-во\r\n        this.counter++;\r\n            if(this.counter === 1) {\r\n                this.props.startStopGame('0:00:00');\r\n                this.clearClass();\r\n                alert(\"You won!!!\")                           \r\n            }\r\n        this.resultsArray = [];\r\n    }\r\n\r\n       \r\n}\r\n\r\n\r\n// Очищаем классы перед созданием нового поля\r\nclearClass() {\r\n    const x = document.getElementsByClassName('correct');\r\n    console.log(x);\r\n\r\n    setTimeout(() => {\r\n        for (let i = (x.length-1); i>=0; i--) \r\n            x[i].className = 'reverse';\r\n    }, 1000);\r\n    \r\n}\r\n\r\n\r\n// Процедура изменения классов полей\r\n//____________________________________________\r\n// flipped = перевернутая картинка\r\n// reverse = не перевернутая картинка\r\n// correct = отработанная картинка (угаданная)\r\ncheckClass = (className) => {\r\n\r\n    // Находим перевернутые картинки\r\n    const x = document.getElementsByClassName('flipped');\r\n\r\n    setTimeout(() => {\r\n\r\n      for(let i = (x.length - 1); i >= 0; i--) {\r\n        x[i].className = className;\r\n      }\r\n\r\n      // Разблокируем ввод\r\n      this.blockInput = false;\r\n  \r\n    }, 1000);\r\n  \r\n  }\r\n\r\n    render() {\r\n\r\n        // размер поля для стиля\r\n        const size = this.props.blocks;\r\n\r\n        console.log('size', size);\r\n        console.log('endCount', this.props.endCount);\r\n\r\n\r\n        // Создаем картинки\r\n        const cards = this.createArray(this.props.blocks, this.props.tokens);\r\n\r\n        const field = cards.map((item, index) => {\r\n            return (\r\n                <div data-item={item} key={index}\r\n                    data-view=\"card\" className=\"reverse\"\r\n                    onClick={this.checkImage}></div>\r\n            )\r\n        });\r\n\r\n\r\n        return (\r\n        <div>\r\n            <form>\r\n                <button className=\"btn btn-primary mr-4\"\r\n                onClick={this.onStartGame}>{this.props.btitle}</button>\r\n\r\n                <button className=\"btn btn-primary\" type=\"submit\"\r\n                onClick={this.onReset}>Сброс</button>\r\n            </form>\r\n\r\n            <div className={`field${size} mt-4`}>\r\n                {field}\r\n            </div>\r\n            \r\n        </div>\r\n        )\r\n    }\r\n}","import Timer from './timer';\r\n\r\nexport default Timer;","import React, { Component } from 'react';\r\n\r\nexport default class Timer extends Component {\r\n       \r\n    state = {\r\n        curTime: '0:00:00'\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.timer) this.Interval = setInterval(this.startTimer, 10);\r\n        else clearInterval(this.Interval);\r\n        }\r\n\r\n    startTimer = () => {       \r\n        \r\n        let minutes = Number(this.state.curTime.substring(0,1));\r\n        let seconds = Number(this.state.curTime.substring(2,4));\r\n        let tens = Number(this.state.curTime.substring(5,7));\r\n    \r\n        let textseconds;\r\n        let texttens;\r\n    \r\n        tens++;\r\n      \r\n        if(tens <= 9){\r\n            texttens = \"0\" + tens;\r\n        }\r\n      \r\n        if (tens > 9){\r\n            texttens = tens;\r\n        }\r\n        \r\n      \r\n        if (tens > 99) {\r\n            seconds++;\r\n            tens = 0;\r\n            texttens = \"00\";\r\n            textseconds = seconds;\r\n        }\r\n    \r\n        if(seconds <= 9){\r\n            textseconds = \"0\" + seconds;\r\n        }\r\n        \r\n       \r\n        if (seconds > 9){\r\n          textseconds = seconds;\r\n        }\r\n    \r\n        if (seconds > 59) {\r\n            minutes++;\r\n            seconds = 0;\r\n            textseconds = \"00\";\r\n        }\r\n        \r\n        const curTime = `${minutes}:${textseconds}:${texttens}`; \r\n    \r\n        this.setState({curTime});\r\n      \r\n      }\r\n    \r\n\r\n\r\n    render () {\r\n\r\n        return (\r\n            <p>Время: {this.state.curTime}</p>\r\n        )\r\n    }\r\n}","import App from './app';\r\n\r\nexport default App;","import React, { Component } from 'react';\nimport AppHeader from '../app-header';\nimport Field from '../field';\nimport Timer from '../timer';\n\n\nimport './app.css';\n\nclass App extends Component {\n  state = {\n    gameOn : false, // Игра началась?\n    blocks : \"8\", // Размер поля\n    tokens : \"2\", // Количество одинаковых картинок\n    buttonTitle: 'Начать игру', // Название кнопки\n  }\n\n  // Начало игры или пауза\n  startStopGame = () => {\n    let title;\n    if (this.state.buttonTitle === 'Начать игру') \n      title = 'Стоп'\n    else title = 'Начать игру';\n\n    this.setState({gameOn : !this.state.gameOn,\n                  buttonTitle: title,\n              });\n  }\n\n  changeField = (name, value) => {\n\n    // Если меняем размер поля\n    if (name === \"blocks\") {\n      // Устанавливаем количество одинаковых картинок по-умолчанию\n      switch (value) {\n        case \"6\" :\n        case \"8\" :\n        case \"10\" :\n        case \"12\" :\n        this.setState({\n          [name]: value,\n          tokens: \"2\"\n        })\n        break;\n        case \"9\" :\n        this.setState({\n          [name]: value,\n          tokens: \"3\"\n        })\n        break;\n        default: return\n      }\n    }\n    // Иначе меняем количество картинок\n    else this.setState({[name]: value});\n  }\n   \n  render() {\n\n    console.log(this.state.blocks);\n\n    const {gameOn, blocks, tokens, buttonTitle} = this.state;\n\n    // Количество пар\n    const endCount = Math.pow(blocks, 2)/tokens\n\n    let timer;\n    let header;\n\n    // Если игра началась, отрисовываем таймер\n    if (gameOn) {\n      timer = <Timer timer={gameOn}/>;\n      header = <h2>Игра началась!</h2>      \n    }\n    // Иначе отрисовываем настройки  \n    else {\n      header = <AppHeader \n                onChangeField={this.changeField} blocks={blocks} tokens={tokens}/>;\n    }\n\n    return (\n      <div className=\"App\">\n          \n          {header}\n          \n          {timer}\n\n          <Field play={gameOn} blocks={blocks} tokens={tokens}\n            btitle={buttonTitle} endCount={endCount}\n            startStopGame={this.startStopGame}/>        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}